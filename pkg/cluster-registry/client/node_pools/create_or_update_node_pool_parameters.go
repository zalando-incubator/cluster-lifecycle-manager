// Code generated by go-swagger; DO NOT EDIT.

package node_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/zalando-incubator/cluster-lifecycle-manager/pkg/cluster-registry/models"
)

// NewCreateOrUpdateNodePoolParams creates a new CreateOrUpdateNodePoolParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateOrUpdateNodePoolParams() *CreateOrUpdateNodePoolParams {
	return &CreateOrUpdateNodePoolParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateOrUpdateNodePoolParamsWithTimeout creates a new CreateOrUpdateNodePoolParams object
// with the ability to set a timeout on a request.
func NewCreateOrUpdateNodePoolParamsWithTimeout(timeout time.Duration) *CreateOrUpdateNodePoolParams {
	return &CreateOrUpdateNodePoolParams{
		timeout: timeout,
	}
}

// NewCreateOrUpdateNodePoolParamsWithContext creates a new CreateOrUpdateNodePoolParams object
// with the ability to set a context for a request.
func NewCreateOrUpdateNodePoolParamsWithContext(ctx context.Context) *CreateOrUpdateNodePoolParams {
	return &CreateOrUpdateNodePoolParams{
		Context: ctx,
	}
}

// NewCreateOrUpdateNodePoolParamsWithHTTPClient creates a new CreateOrUpdateNodePoolParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateOrUpdateNodePoolParamsWithHTTPClient(client *http.Client) *CreateOrUpdateNodePoolParams {
	return &CreateOrUpdateNodePoolParams{
		HTTPClient: client,
	}
}

/* CreateOrUpdateNodePoolParams contains all the parameters to send to the API endpoint
   for the create or update node pool operation.

   Typically these are written to a http.Request.
*/
type CreateOrUpdateNodePoolParams struct {

	/* ClusterID.

	   ID of the cluster.
	*/
	ClusterID string

	/* NodePool.

	   Node pool to be created.
	*/
	NodePool *models.NodePool

	/* NodePoolName.

	   Name of the node pool.
	*/
	NodePoolName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create or update node pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateOrUpdateNodePoolParams) WithDefaults() *CreateOrUpdateNodePoolParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create or update node pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateOrUpdateNodePoolParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithTimeout(timeout time.Duration) *CreateOrUpdateNodePoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithContext(ctx context.Context) *CreateOrUpdateNodePoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithHTTPClient(client *http.Client) *CreateOrUpdateNodePoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithClusterID(clusterID string) *CreateOrUpdateNodePoolParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithNodePool adds the nodePool to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithNodePool(nodePool *models.NodePool) *CreateOrUpdateNodePoolParams {
	o.SetNodePool(nodePool)
	return o
}

// SetNodePool adds the nodePool to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetNodePool(nodePool *models.NodePool) {
	o.NodePool = nodePool
}

// WithNodePoolName adds the nodePoolName to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) WithNodePoolName(nodePoolName string) *CreateOrUpdateNodePoolParams {
	o.SetNodePoolName(nodePoolName)
	return o
}

// SetNodePoolName adds the nodePoolName to the create or update node pool params
func (o *CreateOrUpdateNodePoolParams) SetNodePoolName(nodePoolName string) {
	o.NodePoolName = nodePoolName
}

// WriteToRequest writes these params to a swagger request
func (o *CreateOrUpdateNodePoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}
	if o.NodePool != nil {
		if err := r.SetBodyParam(o.NodePool); err != nil {
			return err
		}
	}

	// path param node_pool_name
	if err := r.SetPathParam("node_pool_name", o.NodePoolName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
