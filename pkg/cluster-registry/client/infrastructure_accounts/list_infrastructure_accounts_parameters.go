// Code generated by go-swagger; DO NOT EDIT.

package infrastructure_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListInfrastructureAccountsParams creates a new ListInfrastructureAccountsParams object
// with the default values initialized.
func NewListInfrastructureAccountsParams() *ListInfrastructureAccountsParams {
	var ()
	return &ListInfrastructureAccountsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListInfrastructureAccountsParamsWithTimeout creates a new ListInfrastructureAccountsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListInfrastructureAccountsParamsWithTimeout(timeout time.Duration) *ListInfrastructureAccountsParams {
	var ()
	return &ListInfrastructureAccountsParams{

		timeout: timeout,
	}
}

// NewListInfrastructureAccountsParamsWithContext creates a new ListInfrastructureAccountsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListInfrastructureAccountsParamsWithContext(ctx context.Context) *ListInfrastructureAccountsParams {
	var ()
	return &ListInfrastructureAccountsParams{

		Context: ctx,
	}
}

// NewListInfrastructureAccountsParamsWithHTTPClient creates a new ListInfrastructureAccountsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListInfrastructureAccountsParamsWithHTTPClient(client *http.Client) *ListInfrastructureAccountsParams {
	var ()
	return &ListInfrastructureAccountsParams{
		HTTPClient: client,
	}
}

/*ListInfrastructureAccountsParams contains all the parameters to send to the API endpoint
for the list infrastructure accounts operation typically these are written to a http.Request
*/
type ListInfrastructureAccountsParams struct {

	/*CostCenter
	  Filter on cost center number.

	*/
	CostCenter *string
	/*CriticalityLevel
	  Filter on criticality level.

	*/
	CriticalityLevel *int32
	/*Environment
	  Filter on environment.

	*/
	Environment *string
	/*ExternalID
	  Filter on external id.

	*/
	ExternalID *string
	/*LifecycleStatus
	  Filter on cluster lifecycle status.

	*/
	LifecycleStatus *string
	/*Name
	  Filter on name.

	*/
	Name *string
	/*Owner
	  Filter on owner.

	*/
	Owner *string
	/*Type
	  Filter on type.

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithTimeout(timeout time.Duration) *ListInfrastructureAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithContext(ctx context.Context) *ListInfrastructureAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithHTTPClient(client *http.Client) *ListInfrastructureAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostCenter adds the costCenter to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithCostCenter(costCenter *string) *ListInfrastructureAccountsParams {
	o.SetCostCenter(costCenter)
	return o
}

// SetCostCenter adds the costCenter to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetCostCenter(costCenter *string) {
	o.CostCenter = costCenter
}

// WithCriticalityLevel adds the criticalityLevel to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithCriticalityLevel(criticalityLevel *int32) *ListInfrastructureAccountsParams {
	o.SetCriticalityLevel(criticalityLevel)
	return o
}

// SetCriticalityLevel adds the criticalityLevel to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetCriticalityLevel(criticalityLevel *int32) {
	o.CriticalityLevel = criticalityLevel
}

// WithEnvironment adds the environment to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithEnvironment(environment *string) *ListInfrastructureAccountsParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithExternalID adds the externalID to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithExternalID(externalID *string) *ListInfrastructureAccountsParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithLifecycleStatus adds the lifecycleStatus to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithLifecycleStatus(lifecycleStatus *string) *ListInfrastructureAccountsParams {
	o.SetLifecycleStatus(lifecycleStatus)
	return o
}

// SetLifecycleStatus adds the lifecycleStatus to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetLifecycleStatus(lifecycleStatus *string) {
	o.LifecycleStatus = lifecycleStatus
}

// WithName adds the name to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithName(name *string) *ListInfrastructureAccountsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetName(name *string) {
	o.Name = name
}

// WithOwner adds the owner to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithOwner(owner *string) *ListInfrastructureAccountsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithType adds the typeVar to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) WithType(typeVar *string) *ListInfrastructureAccountsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list infrastructure accounts params
func (o *ListInfrastructureAccountsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListInfrastructureAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CostCenter != nil {

		// query param cost_center
		var qrCostCenter string
		if o.CostCenter != nil {
			qrCostCenter = *o.CostCenter
		}
		qCostCenter := qrCostCenter
		if qCostCenter != "" {
			if err := r.SetQueryParam("cost_center", qCostCenter); err != nil {
				return err
			}
		}

	}

	if o.CriticalityLevel != nil {

		// query param criticality_level
		var qrCriticalityLevel int32
		if o.CriticalityLevel != nil {
			qrCriticalityLevel = *o.CriticalityLevel
		}
		qCriticalityLevel := swag.FormatInt32(qrCriticalityLevel)
		if qCriticalityLevel != "" {
			if err := r.SetQueryParam("criticality_level", qCriticalityLevel); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.ExternalID != nil {

		// query param external_id
		var qrExternalID string
		if o.ExternalID != nil {
			qrExternalID = *o.ExternalID
		}
		qExternalID := qrExternalID
		if qExternalID != "" {
			if err := r.SetQueryParam("external_id", qExternalID); err != nil {
				return err
			}
		}

	}

	if o.LifecycleStatus != nil {

		// query param lifecycle_status
		var qrLifecycleStatus string
		if o.LifecycleStatus != nil {
			qrLifecycleStatus = *o.LifecycleStatus
		}
		qLifecycleStatus := qrLifecycleStatus
		if qLifecycleStatus != "" {
			if err := r.SetQueryParam("lifecycle_status", qLifecycleStatus); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
