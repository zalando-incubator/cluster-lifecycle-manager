// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePool node pool
// swagger:model NodePool
type NodePool struct {

	// Configuration items unique to the node pool. E.g. custom volume
	// configuration.
	//
	ConfigItems map[string]string `json:"config_items,omitempty"`

	// A discount strategy indicates the type of discount to be associated
	// with the node pool. This might affect the availability of the nodes in
	// the pools in case of preemptible or spot instances.  Possible values
	// depend on the provider, the only common one is "none".
	//
	// Required: true
	DiscountStrategy *string `json:"discount_strategy"`

	// instance types
	// Required: true
	// Min Items: 1
	// Unique: true
	InstanceTypes []string `json:"instance_types"`

	// Maximum size of the node pool
	// Required: true
	MaxSize *int64 `json:"max_size"`

	// Minimum size of the node pool
	// Required: true
	MinSize *int64 `json:"min_size"`

	// Name of the node pool
	// Required: true
	Name *string `json:"name"`

	// Profile used for the node pool. Possible values are "worker-default",
	// "worker-database", "worker-gpu", "master". The "master" profile
	// identifies the pool containing the cluster master
	//
	// Required: true
	Profile *string `json:"profile"`
}

// Validate validates this node pool
func (m *NodePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePool) validateDiscountStrategy(formats strfmt.Registry) error {

	if err := validate.Required("discount_strategy", "body", m.DiscountStrategy); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateInstanceTypes(formats strfmt.Registry) error {

	if err := validate.Required("instance_types", "body", m.InstanceTypes); err != nil {
		return err
	}

	iInstanceTypesSize := int64(len(m.InstanceTypes))

	if err := validate.MinItems("instance_types", "body", iInstanceTypesSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("instance_types", "body", m.InstanceTypes); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("max_size", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateMinSize(formats strfmt.Registry) error {

	if err := validate.Required("min_size", "body", m.MinSize); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateProfile(formats strfmt.Registry) error {

	if err := validate.Required("profile", "body", m.Profile); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePool) UnmarshalBinary(b []byte) error {
	var res NodePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
