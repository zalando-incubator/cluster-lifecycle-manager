// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
// swagger:model Cluster
type Cluster struct {

	// Human readable alias for the Kubernetes cluster. The alias is unique
	// but can be changed.
	//
	// Required: true
	// Pattern: ^[a-z][a-z0-9-]*[a-z0-9]$
	Alias *string `json:"alias"`

	// URL of the Kubernetes API server endpoint
	// Required: true
	APIServerURL *string `json:"api_server_url"`

	// A version channel for the cluster.
	// Required: true
	Channel *string `json:"channel"`

	// Configuration items unique to the cluster. E.g. custom API key used
	// by one of the cluster services.
	//
	ConfigItems map[string]string `json:"config_items,omitempty"`

	// Level of criticality as defined by tech controlling. 1 is non critical, 2 is standard production, 3 is PCI.
	// Required: true
	CriticalityLevel *int32 `json:"criticality_level"`

	// The environment in which the cluster run.
	//
	// Required: true
	Environment *string `json:"environment"`

	// Globally unique ID of the Kubernetes cluster
	// Required: true
	ID *string `json:"id"`

	// The identifier of the infrastructure account in which the cluster will live in
	// Required: true
	InfrastructureAccount *string `json:"infrastructure_account"`

	// Status of the cluster.
	// Required: true
	// Enum: [requested creating ready decommission-requested decommissioned]
	LifecycleStatus *string `json:"lifecycle_status"`

	// Cluster identifier which is local to the region
	// Required: true
	LocalID *string `json:"local_id"`

	// node pools
	NodePools []*NodePool `json:"node_pools"`

	// The provider of the cluster. Possible values are "zalando-aws", "GKE", ...
	// Required: true
	Provider *string `json:"provider"`

	// The region of the cluster
	// Required: true
	Region *string `json:"region"`

	// status
	Status *ClusterStatus `json:"status,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIServerURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriticalityLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfrastructureAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	if err := validate.Pattern("alias", "body", string(*m.Alias), `^[a-z][a-z0-9-]*[a-z0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateAPIServerURL(formats strfmt.Registry) error {

	if err := validate.Required("api_server_url", "body", m.APIServerURL); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateChannel(formats strfmt.Registry) error {

	if err := validate.Required("channel", "body", m.Channel); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateCriticalityLevel(formats strfmt.Registry) error {

	if err := validate.Required("criticality_level", "body", m.CriticalityLevel); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateInfrastructureAccount(formats strfmt.Registry) error {

	if err := validate.Required("infrastructure_account", "body", m.InfrastructureAccount); err != nil {
		return err
	}

	return nil
}

var clusterTypeLifecycleStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requested","creating","ready","decommission-requested","decommissioned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeLifecycleStatusPropEnum = append(clusterTypeLifecycleStatusPropEnum, v)
	}
}

const (

	// ClusterLifecycleStatusRequested captures enum value "requested"
	ClusterLifecycleStatusRequested string = "requested"

	// ClusterLifecycleStatusCreating captures enum value "creating"
	ClusterLifecycleStatusCreating string = "creating"

	// ClusterLifecycleStatusReady captures enum value "ready"
	ClusterLifecycleStatusReady string = "ready"

	// ClusterLifecycleStatusDecommissionRequested captures enum value "decommission-requested"
	ClusterLifecycleStatusDecommissionRequested string = "decommission-requested"

	// ClusterLifecycleStatusDecommissioned captures enum value "decommissioned"
	ClusterLifecycleStatusDecommissioned string = "decommissioned"
)

// prop value enum
func (m *Cluster) validateLifecycleStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterTypeLifecycleStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateLifecycleStatus(formats strfmt.Registry) error {

	if err := validate.Required("lifecycle_status", "body", m.LifecycleStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStatusEnum("lifecycle_status", "body", *m.LifecycleStatus); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateNodePools(formats strfmt.Registry) error {

	if swag.IsZero(m.NodePools) { // not required
		return nil
	}

	for i := 0; i < len(m.NodePools); i++ {
		if swag.IsZero(m.NodePools[i]) { // not required
			continue
		}

		if m.NodePools[i] != nil {
			if err := m.NodePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
