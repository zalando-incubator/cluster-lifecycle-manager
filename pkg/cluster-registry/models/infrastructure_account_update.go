// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfrastructureAccountUpdate infrastructure account update
//
// swagger:model InfrastructureAccountUpdate
type InfrastructureAccountUpdate struct {

	// Cost center of the Owner/infrastructure account
	// Example: 0000001234
	CostCenter string `json:"cost_center,omitempty"`

	// Level of criticality as defined by tech controlling. 1 is non
	// critical, 2 is standard production, 3 is PCI
	//
	// Example: 2
	CriticalityLevel int32 `json:"criticality_level,omitempty"`

	// Environment. possible values are "production" or "test".
	//
	// Example: production
	Environment string `json:"environment,omitempty"`

	// The external identifier of the account (i.e. AWS account ID)
	// Example: 123456789012
	ExternalID string `json:"external_id,omitempty"`

	// Globally unique ID of the infrastructure account.
	// Example: aws:123456789012
	ID string `json:"id,omitempty"`

	// Lifecycle Status is used to describe the current status of the account.
	// Enum: ["requested","creating","ready","decommissioned"]
	LifecycleStatus string `json:"lifecycle_status,omitempty"`

	// Name of the infrastructure account
	// Example: foo
	Name string `json:"name,omitempty"`

	// Owner of the infrastructure account (references an object in the organization service)
	// Example: team/bar
	Owner string `json:"owner,omitempty"`

	// Type of the infrastructure account. Possible types are "aws", "gcp",
	// "dc".
	//
	// Example: aws
	Type string `json:"type,omitempty"`
}

// Validate validates this infrastructure account update
func (m *InfrastructureAccountUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLifecycleStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var infrastructureAccountUpdateTypeLifecycleStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requested","creating","ready","decommissioned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infrastructureAccountUpdateTypeLifecycleStatusPropEnum = append(infrastructureAccountUpdateTypeLifecycleStatusPropEnum, v)
	}
}

const (

	// InfrastructureAccountUpdateLifecycleStatusRequested captures enum value "requested"
	InfrastructureAccountUpdateLifecycleStatusRequested string = "requested"

	// InfrastructureAccountUpdateLifecycleStatusCreating captures enum value "creating"
	InfrastructureAccountUpdateLifecycleStatusCreating string = "creating"

	// InfrastructureAccountUpdateLifecycleStatusReady captures enum value "ready"
	InfrastructureAccountUpdateLifecycleStatusReady string = "ready"

	// InfrastructureAccountUpdateLifecycleStatusDecommissioned captures enum value "decommissioned"
	InfrastructureAccountUpdateLifecycleStatusDecommissioned string = "decommissioned"
)

// prop value enum
func (m *InfrastructureAccountUpdate) validateLifecycleStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infrastructureAccountUpdateTypeLifecycleStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InfrastructureAccountUpdate) validateLifecycleStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LifecycleStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStatusEnum("lifecycle_status", "body", m.LifecycleStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this infrastructure account update based on context it is used
func (m *InfrastructureAccountUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfrastructureAccountUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfrastructureAccountUpdate) UnmarshalBinary(b []byte) error {
	var res InfrastructureAccountUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
