// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePoolUpdate node pool update
// swagger:model NodePoolUpdate
type NodePoolUpdate struct {

	// Configuration items unique to the node pool. E.g. custom volume
	// configuration.
	//
	ConfigItems map[string]string `json:"config_items,omitempty"`

	// A discount strategy indicates the type of discount to be associated
	// with the node pool. This might affect the availability of the nodes in
	// the pools in case of preemptible or spot instances.  Possible values
	// depend on the provider, the only common one is "none".
	//
	DiscountStrategy string `json:"discount_strategy,omitempty"`

	// instance types
	// Min Items: 1
	// Unique: true
	InstanceTypes []string `json:"instance_types"`

	// Maximum size of the node pool
	MaxSize int64 `json:"max_size,omitempty"`

	// Minimum size of the node pool
	MinSize int64 `json:"min_size,omitempty"`

	// Name of the node pool
	Name string `json:"name,omitempty"`

	// Profile used for the node pool. Possible values are "worker-default",
	// "worker-database", "worker-gpu", "master". The "master" profile
	// identifies the pool containing the cluster master
	//
	Profile string `json:"profile,omitempty"`
}

// Validate validates this node pool update
func (m *NodePoolUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePoolUpdate) validateInstanceTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceTypes) { // not required
		return nil
	}

	iInstanceTypesSize := int64(len(m.InstanceTypes))

	if err := validate.MinItems("instance_types", "body", iInstanceTypesSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("instance_types", "body", m.InstanceTypes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePoolUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePoolUpdate) UnmarshalBinary(b []byte) error {
	var res NodePoolUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
