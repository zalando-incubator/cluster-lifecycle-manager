// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xcb\x8e\xdb\xb8\x12\xdd\xf7\x57\x08\x5e\x27\x82\x49\xbd\xac\x6c\xef\x0f\xdc\xcd\xac\x06\x03\x83\xb1\x95\x8e\x00\x4b\x6d\x50\x72\x26\xc9\x20\xff\x3e\x50\x3a\x8f\xb1\x49\x25\x45\x57\x91\x2c\xbb\xb5\x4c\xa7\xd1\xc7\x3a\x66\xbd\x0f\x4b\x7f\x3e\x24\xc9\x3f\x0f\x49\x92\x24\xab\xb6\x1f\x46\xd5\xef\x9a\xed\xf8\xe9\xd8\xac\xde\x24\x2b\x25\x52\xf9\xf1\xa0\xf4\x63\xb3\x7a\xf5\xfc\x2b\x1f\xfe\xf7\xff\x3f\x56\x6f\x92\xcd\xb7\x7f\x76\x4d\xf7\xa4\x3f\xad\xde\x24\xa2\xfc\xf6\x93\xe6\xed\xb0\x55\xc3\xb6\xff\xd0\x4d\x7f\x61\xd4\xa7\xe6\xdb\x7f\x0c\xe3\x93\x56\x8f\xd3\x0f\xfb\xd3\xe1\xf0\x90\x24\x5f\x5e\xfd\x1a\x39\xb7\x22\xff\x00\xfa\x01\x9d\x49\x72\x68\x1b\xb0\xbc\xc4\xcd\xc9\x61\xbb\x66\xdf\x9e\xba\xcb\x07\xbe\xc4\xa5\x7f\x5c\x2b\xd1\xf9\x25\xee\x86\x16\x77\x37\xf3\xbc\x06\xcf\x22\xad\xac\xc8\xef\xd4\x61\x30\xa1\x9f\xe1\x92\x64\xb5\x6f\x3e\xb4\xbb\x66\xf8\xc9\xe0\xd7\x0f\xb1\x3b\x9c\xf6\xcd\xb0\x1d\xfe\x56\xc7\xed\x51\xe9\xb1\x1d\xdb\xa7\xfe\xec\x31\x92\x64\x35\x01\x6c\x87\x61\x7f\x0e\x32\xc1\xb4\x9f\x27\x8c\xac\x58\xff\xfc\x91\xed\xd7\x9e\x3f\xcd\xb6\x6f\x9a\xfd\xb0\x6d\xfb\x76\x6c\xd5\xa1\xfd\xac\x6c\x58\xa3\x6e\xbb\xed\x70\x3a\x1e\x9f\xf4\xf8\xfd\x0f\x7d\xfd\xbf\x2f\x00\x02\x61\xb6\x89\xa4\x2f\x07\xd0\x77\xfe\xfc\xbf\xe3\x2f\x97\x2c\xf8\xcb\xc0\xce\xad\xc0\x31\x28\xc9\x19\xdc\x5c\x12\x78\xc6\x49\x30\xfe\xc0\x2e\x7a\xcd\x8d\x40\x51\xf2\x60\x70\x63\x65\x30\x33\x9c\x60\xc9\x8e\xc1\xcc\x30\xe2\x38\x0c\x82\x62\x75\x96\x56\xec\x6c\xf8\xbb\x99\x44\xe6\x0f\x16\xfc\xab\x94\x1d\x7f\x39\x87\xf3\x97\x7b\x89\x21\xa0\xfc\x29\xf7\xe3\x7e\x81\xd8\x33\x8e\xcb\xc0\x76\x72\x5c\x40\x6c\x1f\x26\x0f\x84\xf6\x61\x2d\x20\xe8\x22\x15\xf6\x93\x96\x1b\x47\xad\x26\xae\xc5\x26\x6c\xfb\xd7\x5d\x99\xc9\x7a\x4e\x5c\x16\xed\x8a\x54\xda\xcf\x79\x6d\x9c\x35\x51\x13\xd7\x46\x13\x78\x9c\xfa\x77\x57\x44\xab\x7f\x77\x45\x5a\x03\x8d\xbb\xa2\x87\x8e\x51\x7a\xef\x8a\xb4\x6b\x46\x75\x88\x72\xc0\xe2\x14\xdf\xc5\xde\x93\x4d\x53\x87\xfe\xf3\xa0\xfe\x1c\xf9\xeb\x35\x26\xf4\x9f\x43\x5d\xc4\xfe\xe9\x0f\x01\x43\x7f\xb1\xf7\xe1\x1c\xae\xec\x5f\x38\xf1\x27\xb9\xf0\xe7\xc3\xc5\x85\x20\x30\xe7\x42\xa0\x0f\x47\x1d\x82\x40\x36\x16\x4c\x1d\x6e\x42\x90\x67\x74\x1f\x23\x71\x47\x1e\xb9\x42\x90\x27\x78\x9c\xbc\xde\x21\xfc\xd2\x27\x1d\x3d\x34\x72\x49\x41\x0f\x0d\x75\xfa\xb9\x87\xc7\x86\xfa\x4b\xfa\x12\xaa\x87\xb9\x9a\x22\x95\xf6\xd2\x11\x05\x0d\xb3\x54\xb1\x9e\x29\x5b\xaf\xc7\xde\x49\x87\x0e\x27\xb6\xc5\x44\x3f\xa8\xd8\x18\x3d\xa6\x28\x83\x0a\x2d\xc0\x2c\xca\x99\x5c\x3d\x66\x9f\x93\x43\xa3\x78\x2f\xa1\x2e\xaf\xb4\xbb\x3c\x30\x81\x25\x39\x81\x72\x6d\xc4\x2c\xa7\x63\xf8\xcb\xa0\xe5\xc6\x21\xd4\x77\x0b\x69\x77\xde\xf0\x99\x2d\xfd\x39\x64\x44\x23\xb4\x79\x8a\xb7\x66\x7a\x9f\xc8\x88\x46\x58\x58\xcb\xd0\x81\x25\xbb\x5b\x12\xdf\x89\x54\x94\x56\x1a\x4b\x83\xc7\xba\xb2\x27\x45\x61\xe2\xb3\xb5\x8a\x44\x8d\x80\x88\x72\xf9\x77\x70\x8d\x14\xda\x29\x52\x13\x98\x57\x3c\x08\x84\x86\x15\xb4\x3f\xa4\x6f\x64\x70\x38\x82\x8f\xe0\xe4\x06\xab\x64\x41\xf1\x67\xf5\x84\x1c\x74\x18\x8f\x2e\x55\xca\x92\x5e\xdb\x18\xcc\xe0\x71\x24\xdf\xd8\x5b\x42\xd7\x0f\x47\x1f\xe1\x4a\x24\x37\x1f\x0c\x04\xf7\x53\x9c\xc1\xc0\x07\x3f\x59\x10\x04\xfc\xbd\x43\xf2\x20\x0b\x64\xf2\xb0\xb9\xdb\x1c\xec\x3d\x38\x81\x98\x19\x83\x44\xf4\xde\x8c\x38\x84\x7a\x80\x92\x5d\x83\x84\x11\x89\x50\x4f\x26\xa4\x8b\x0f\x0f\xd2\xab\x63\xc3\xe2\x30\x47\xa3\xa8\x0c\x1a\x05\x52\x9b\xcd\xb0\xbe\x27\xca\x28\xda\x60\x0d\x3b\x1f\xea\x6c\x06\x45\x41\x1b\xb0\x5b\xe7\xa1\xf3\xce\x84\xc2\x60\x7d\x77\xfa\xfc\x86\x0b\x85\xa1\xba\x74\xf4\xd9\x0d\x0f\x06\xbd\x95\x56\xd4\xa7\xd0\x3a\x6e\x67\xa1\xf4\x68\xc1\x57\x7d\xb0\xc1\x84\x5e\xaf\xc0\x85\xc0\x60\xc1\x84\x5c\x2e\xc8\x86\xc2\x60\xc1\x84\xbc\xd3\xce\x86\x42\x90\x88\x42\xcc\xaa\x28\x62\xb6\xda\x0b\x16\x04\xda\x84\xce\xa6\xe6\xa8\x10\x48\x23\xbe\xdf\x40\x72\x13\xe9\x8c\x75\x54\xc1\x41\x37\xd8\x66\x4d\x0f\xbf\xc9\x92\x6d\x70\xd2\x4b\x72\x3f\x58\x15\x3c\x4e\x61\xd3\xc3\x6f\xc5\x54\x25\x4e\x82\x49\x6e\xca\x9c\x48\x04\x66\x85\xcc\x2e\x40\x48\x3e\x0c\x66\xf6\xb4\xd0\x88\x28\x2e\x8a\xca\x10\xde\x90\xd1\x21\xb4\x57\x77\xd2\xd4\x67\xba\x08\x81\x43\x1c\x43\x46\x1c\xc2\xf2\x42\x66\x67\x50\x48\x36\x21\x19\x98\xd5\x30\xbb\x46\xc2\xc3\x0f\x76\xc0\x85\x41\x1c\xef\xd0\xb3\xd8\xc4\xd2\x41\x57\x1f\xe1\xd7\x38\xd0\x37\x09\x73\xc1\x84\xc2\xa1\x53\x87\xcb\xca\xce\x60\x90\xdf\x32\x25\x73\x13\x4b\x24\xfe\x80\x97\x24\xd8\x5d\x52\x60\x62\xc3\x73\xf3\x3a\x33\x88\xe4\x29\x3b\x1d\xc3\x86\xc5\x46\xaf\x6e\x6e\x64\x67\x16\x24\x9b\x94\x9d\x8c\x81\xc7\x65\x99\x6e\x66\xe0\x64\x26\x83\x55\x1a\xb3\xd7\xcf\xd9\x94\xc1\xd3\x12\x7e\x7b\xbd\x38\x2c\x46\xeb\x80\x6d\x6a\x74\x3e\x48\x7f\x00\x33\xc9\x82\xbe\x1b\xce\x06\x59\xf0\x17\x26\x95\xb9\xcf\x95\x5e\x5d\x9e\x8a\xb5\x9d\xc0\xb5\xc1\x20\xf9\x76\xab\x09\xdd\x8f\xa6\x16\x88\xee\x43\x8a\x0a\x84\xf6\xa2\xe0\x04\x62\x83\x1c\x36\xb5\x6e\xbd\x83\xee\x13\x9b\x69\x5c\x21\x90\x1d\xd6\x89\x91\xef\x1f\x98\xc0\xb1\x67\x1c\x03\x0e\x9e\x9c\x38\x8d\x9f\xa0\xe0\x28\xfb\xc2\x20\x23\xcd\x0b\x03\x8d\x95\x15\x63\xb0\x11\x96\x8d\x81\x85\x2d\x14\xf3\x71\xc2\x50\x2e\x05\x01\xac\xa2\xba\x14\x15\xd5\xa7\xa8\xa8\x4e\x45\xc5\xf3\x2a\x2a\xa2\x5b\x51\x31\xfd\x8a\x8a\xe4\x58\x54\x3c\xfb\xde\x7b\x32\xf0\x10\xa3\x4a\x16\xea\xa1\xaf\x1c\xfa\x71\x14\x41\xae\xdb\xf3\xe1\x90\xde\xdd\x85\x18\x57\x66\x6c\x08\xf4\xe1\xb4\x43\x98\x31\x1f\x06\xa9\xbd\x7f\x18\xcd\x0b\x13\xf2\xe8\x43\x58\x10\xb9\x06\x07\xb5\x46\x57\x2c\x61\x98\x82\x42\x2f\xc5\x42\x88\x28\x5c\x72\xa1\x70\x49\x64\xf0\x14\x2e\x79\x0c\x8a\xbf\x25\x8d\x41\x12\xe8\xa5\x80\x0e\xc1\x20\x1b\x2f\xb8\xe4\x81\xd7\x73\xe7\xa1\x47\xfa\xa2\xc2\xc7\x92\x46\x5f\x4d\xdf\x51\xc2\x53\xc0\xb9\x0b\x34\xd7\x8f\xdf\x8e\xf0\xc5\x02\xf4\xdb\xb2\x8e\xd0\x2b\xf9\x4e\x77\xa1\x41\xc8\x51\xb7\x84\x1d\xfd\x5c\x02\x07\x42\xc7\xdb\x11\x76\xcc\xf6\x01\x6f\x8b\xdd\x67\xc9\xa8\x6f\x63\x81\x00\x50\x60\x1d\x87\xc0\x70\xbb\xa3\xc9\x29\xc4\xbd\xeb\x92\x8e\xc2\x1b\xde\x02\xcf\x85\xc2\x9b\x58\x20\x40\xaf\xcd\xa4\x23\xf0\x26\xee\xbf\xd3\x6b\x83\xa9\x08\x74\xd0\xf7\xd1\xa7\x40\x1a\xac\xef\x23\x4f\x81\x34\x5c\xdf\x47\xbf\xa3\x55\xcf\xbe\xaf\x34\x40\xfe\xa5\x81\xea\x42\x57\xa7\x03\xc4\x8e\xb6\x1e\x56\x3b\x68\x0c\xc9\x45\x31\xda\x41\x63\x38\xb7\xec\x04\x03\xee\x27\xdf\x86\x82\xd3\x6f\x35\x00\x22\xc3\x4d\x9c\xfe\xa9\xc1\x16\x4e\x2d\xff\xd2\x40\x91\x21\xb5\x24\x47\x43\x55\x86\x3e\xce\x18\xfd\x85\x71\x18\xb0\x83\xca\xd0\x83\x53\x71\x50\x19\x7a\xf0\x2a\x0e\x2a\x43\x0f\x5f\x39\x58\x65\x48\xef\x57\xe0\x2a\x43\x0f\x8e\x05\x2e\x33\xf4\xe0\x59\x80\x32\x43\x7a\xd7\x02\xd5\x19\x7a\xb0\x70\x07\x81\x03\x76\x36\x70\xa7\xdd\x2a\x27\x9d\x21\xb6\xe3\x77\x9f\xf3\x15\xed\xa0\x33\x44\x8e\x97\xef\x73\x3e\xaf\x5d\x74\x86\xec\xe6\xcb\x7c\x28\xbc\xc9\xcd\x46\x1c\x26\xcc\x1a\xae\x34\xe4\x26\xb0\x61\x31\x22\xd5\x2e\x4a\xc3\x25\x10\xcf\x52\xe8\xa5\x60\x78\x31\x4a\x43\xed\xa2\x34\x5c\x52\x99\x59\x0a\x97\x4c\x06\xc5\xdf\x92\xc8\x60\x19\xf4\x52\x44\xbf\x18\xa9\xa1\x86\x4a\x0d\x97\x4c\xd0\x4e\x9e\x87\x4e\xe9\x8b\x0a\x20\x4b\x22\x7d\x35\x7d\xa3\x48\xbb\x76\xa7\x9f\x7e\xb7\xcf\x68\x9d\x96\x22\xb3\xf2\x77\xfd\x10\x6e\x04\xbf\x46\x8b\x7c\xa3\xcb\x28\xe3\x6c\x55\x19\xa5\x7d\x7f\x94\x29\xad\xf4\x00\x0c\xf9\x9e\xa9\x47\xeb\xa3\x4c\x7b\xd5\x03\x8e\x17\xf5\x84\x77\x94\xb0\xa5\xa3\x1e\x4e\x56\xa4\xbd\x39\x23\x7c\x35\x1e\x71\x5f\x7c\x04\x4a\x97\x88\xc7\x1f\xe3\xcc\x32\x36\xa0\x31\xa1\x70\x2d\xb6\x64\xa6\x3b\xe4\xb0\x16\x53\x32\x50\xe7\x4c\x09\x83\x6b\xb3\x24\x33\x39\x26\x87\x8d\xb3\x4d\x62\xcc\xa2\xed\x2c\x99\xa0\xe3\x58\x92\x8a\x65\x4a\x2a\x92\x2d\xa9\x58\xc6\xa4\x22\x59\x53\xac\xe5\x2c\xa7\xd7\x42\x8e\x6f\x85\xb5\xc8\xc9\x2d\xd7\xc2\xa5\x24\x97\x16\x9e\x5e\x97\x0e\x9f\xa0\x14\xe4\x32\xbb\xd3\xeb\xda\xe1\x03\xd4\x92\x3c\x37\xf8\xe8\xf0\x3a\xf4\xba\x42\xbe\x0e\xdd\xc3\x35\x81\xda\x9f\x42\xdb\x61\xfd\xe6\x47\x91\x66\xf6\xc8\xf0\xb3\xb5\xf6\x9f\xfd\x06\x45\xcc\x97\x0d\xf2\xe6\xb1\x81\x1f\x47\x3c\x8f\x77\x7c\x1e\x1b\x68\xa6\x82\xbe\x75\xe1\xe1\xfd\xfc\xa8\x8d\xba\x94\x1c\xc2\x8d\x3a\xab\xd7\xec\x6e\xaf\x30\x3a\x8c\xd0\x49\x04\xfa\x5d\xc0\x1e\x96\x63\xfb\xbb\x81\xe1\x48\x22\x74\x18\xc1\x30\x4e\xd7\xfe\xae\xf3\x39\x92\x08\xcc\x75\xf9\x5d\xe7\x13\x2c\x8c\xf9\xb3\x58\xf4\x15\x56\x0e\xe1\x9d\xf5\x89\xc2\x65\xb2\x8d\xe3\xef\x56\x5f\xe0\x98\x73\x18\xed\x4c\x04\x86\x7a\x7d\x23\xfd\x0b\x81\xb9\x1c\xc1\x65\xb0\x8d\x20\xcf\xda\xf0\x58\xe2\x07\x98\xbf\x65\xb0\xfd\x4b\xfa\x1e\xfe\x7a\xf8\x37\x00\x00\xff\xff\xcf\x0c\x75\xb8\x22\xbc\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 48162, mode: os.FileMode(420), modTime: time.Unix(1563364644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
