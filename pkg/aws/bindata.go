// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5d\xcd\x8e\xdb\x38\x13\xbc\xcf\x53\x08\x3e\x67\x04\x93\xfa\xb1\x3d\xd7\xef\x05\xbe\xcb\x9e\x16\x8b\x40\x6b\x2b\x33\x06\x46\xca\x80\xb6\x83\x24\x8b\xbc\xfb\x42\xf9\x5d\x0c\xe9\xdd\x62\x75\xb7\x65\x1f\x33\x98\xa8\x6b\xc8\xae\x12\xbb\x59\xa4\x7e\xbf\x2b\x8a\xbf\xee\x8a\xa2\x28\x16\xfb\xf1\x70\xec\xc6\x6d\xff\xf6\xf8\xe9\xa5\x5f\x3c\x14\x8b\xce\x95\xfe\xe3\x73\x17\x1e\xfb\xc5\x9b\x6f\xbf\xf2\xe1\x7f\xff\xff\x6d\xf1\x50\xac\xbf\xff\x73\xe8\x87\xf7\xe1\xd3\xe2\xa1\x70\xed\xf7\x9f\x1c\x8e\xef\x43\xf7\x38\xfd\xef\xf1\xf4\xfc\x7c\x57\x14\x5f\xde\xfc\x7b\x80\x3a\x19\xe0\xe7\xf3\x7e\x46\xa8\x3c\x1b\x21\xf5\x7c\xff\xfa\xf1\x35\xfb\xf4\xa1\xdf\xed\x4f\xc3\x6b\xf8\xaf\x1f\x4f\x83\x1f\xfa\x63\xf7\x6c\x38\x38\xc9\xd1\xaf\x5f\x3f\x7f\x4d\x3d\x7e\x7b\x66\x74\xa2\xc1\x77\xe5\x2a\x0a\xf0\xed\xa1\x45\xb1\xd8\xf5\x1f\xf6\xdb\xfe\xf0\x6b\x54\xa7\x5f\xdb\x7f\x9e\x7e\xa7\x6a\x96\x3f\x7f\x34\x7e\x18\xfa\xb7\x87\xc3\x6e\xf1\x50\xbc\xeb\x9e\x0f\xfd\xd7\x9f\x7f\x01\x20\x62\x09\x0e\x01\xac\x5f\x03\xac\xbd\x18\x60\x05\x53\xb0\x41\x20\xfa\xd7\x10\xd7\x0a\x08\x61\x0e\x2f\x29\x88\xae\x55\xc0\xb8\x4e\x62\xac\xa2\x5c\x6c\x39\x8c\x95\xc6\x4c\x43\x4a\x55\x95\x2b\x6e\xa6\x7f\xcc\x87\x04\x21\x26\x17\xab\x92\x43\x58\x8b\xc7\xb0\x16\xb0\x05\x92\xb4\x5a\x92\xec\x60\x84\x33\xa9\x1a\x45\x48\xa4\x2a\x18\x81\x4f\x34\x30\x00\x9f\x27\x50\x80\xa6\x74\xe9\x79\xae\xa3\x89\xde\x70\x2b\x93\x29\x44\x7a\x1e\x56\xf1\xeb\xab\xe6\x56\x0f\xdb\xa6\xf4\xe9\x6c\xda\x44\x73\xed\x36\xdc\x2b\x7e\x8a\x61\xba\x84\xdb\x36\xd6\x4b\xb8\x6d\x53\x6e\x40\x46\xac\xe8\x08\x86\x8b\xc4\x6d\x93\x5c\xc5\xa9\xce\xb1\xe9\x32\xae\xd9\x89\xe8\x86\x28\xff\x66\x99\x94\xfe\x63\x38\xa1\xca\x3f\x81\x94\x10\xf6\x62\x28\x45\x94\x47\x16\x9d\x3a\x28\x69\xd1\x40\x16\xee\x5e\x03\xa2\x40\x76\x10\x8c\xb5\x06\x46\x81\x70\x21\x18\x55\xa6\x9a\x94\x3e\x04\x5f\xba\x3e\xcb\x83\xc7\x6b\xe7\xc5\xc8\xc2\xaa\x2f\x32\x84\x4e\x0e\x70\xcc\x50\x46\xfa\x15\x34\xa2\x92\xe1\x1d\x1d\x01\x65\x7c\xcd\xff\x11\x28\x61\xe9\x65\xe5\x88\xf1\xad\x29\x3d\xbb\x36\x1e\x93\x94\xd1\x9d\x6b\x2c\xe3\xdd\x92\x5d\xe0\x6f\x7d\x46\xc1\x8e\x55\x9b\x11\xf5\xd7\xf2\x72\x33\x38\x18\xa6\x27\xd7\x1c\x4e\xdc\x58\xd8\x79\x94\x9a\x6d\x4c\xcd\x04\xc4\x36\xf1\x36\x57\xc0\x88\x92\xdb\x79\xec\x5d\x19\x8d\xa4\x0e\x4c\xb4\x38\x47\xe7\x3b\x4a\x4b\x1d\x98\x18\x41\x2b\x90\x3b\x95\x01\xc8\x77\xae\x74\x6d\x12\x66\x1b\xe1\xdc\xac\xa0\x75\x66\xfc\x76\x4f\x53\x1c\x7f\x79\xbe\xc3\x77\x40\xc0\xb4\x8c\x96\x99\x2b\x39\x44\x94\x3a\x60\x4e\xc6\xcb\x4c\xe9\x30\x3e\xc2\x12\x84\x75\xb1\x23\x84\xe2\x0e\xf1\x63\xce\x0b\x67\x26\x21\x7f\xac\x70\xc6\xd4\x6b\xae\xd8\x7f\xc4\xbb\xf9\xa9\x8c\x07\x43\x48\x5e\x9a\x58\x88\x83\x44\x01\xa1\x10\xf5\x6e\xc4\xdb\x22\x60\x79\xa2\x5f\xe0\x7d\x83\x89\x66\x8d\x6f\xb8\x7a\x5e\x07\x26\x28\x11\x64\x3d\xef\x7f\x2c\xa8\x45\x18\x51\x72\xb4\x9c\xd2\xea\x80\x44\xe9\xe5\x3c\x57\x93\xea\x4c\x37\x56\xd8\x57\x6b\x52\x02\xa6\x10\x60\x99\xc2\x25\xbd\x93\xce\xd5\x53\xc6\x0a\x08\x64\xe6\xda\x60\xa1\xf6\x04\xaf\x81\x58\x66\xaa\x60\xd4\x65\xa6\x45\xf5\xf0\x84\x57\x8b\x20\x33\x2d\x8a\x87\xa7\xc3\x39\x98\x6e\x15\xc1\x74\x90\x2f\xc2\xa4\xc8\xd9\x2b\x97\xb5\x09\x67\x84\x02\x44\xe5\xaa\x36\x6e\x62\x68\x80\x54\xee\x61\x44\x22\xa4\x02\x52\xb7\xa2\x8d\x44\x48\x01\xa3\x70\x79\x8e\x8c\xa4\x13\xbf\x7a\xf7\xb0\xa1\x08\xa3\x4d\xfc\x5a\xd4\x80\xa8\x4c\x9b\xb8\x18\xd3\x00\xa9\x4c\x9b\x88\xdb\x2a\x20\xa1\x6e\xb3\x4b\xb6\x9b\xb1\xf6\x85\x70\x11\xb4\xaf\xc0\x76\x75\xe3\xa0\xa9\xb6\xa1\x8c\xb1\xf8\x6c\xa4\x1b\x65\xfb\xaa\xcf\xa8\x46\x53\x6b\x6a\x24\x21\x57\x8d\x7c\x28\xfb\x11\xdf\x01\x5f\xb5\x9c\x4a\x6a\xe1\x04\x75\x92\x5c\x50\xea\x80\xac\xd2\x4a\x19\xd1\x07\x33\x66\x44\x99\xa9\x34\x94\xe9\xf7\xa2\x8f\x4b\x31\xac\x4f\x12\x0d\xa6\x12\x4c\x4c\x2c\xe9\x72\x51\x03\x22\x56\x35\xcf\xcc\x1c\x50\x2e\xc9\x72\x51\x8c\x71\x00\x0f\x05\xd0\x3e\x56\x71\xab\x77\x40\x0f\x16\xa0\x6e\xe0\xf8\xc5\xed\x14\x30\x1e\x86\xee\x39\x3a\x9d\x10\xf1\x85\x74\xf7\xcb\x6d\xdf\x03\x7a\xbe\x01\xdb\x75\x30\xb0\xf7\x0f\xe7\x8a\xd8\x98\x2c\x75\xc9\xd1\x65\x2d\x3e\x24\x31\x9c\x2b\x63\xe3\x57\xe1\xba\xe4\x5e\x86\xf2\xbd\xf8\xe1\x4c\x85\x18\xcb\xf7\xaa\xe4\x0a\x1b\x85\xd9\x86\x6b\x2f\xf2\xa4\x84\xf8\x30\xc7\x00\x16\x0c\xa0\x32\xc6\x27\x76\xbc\x1c\xa0\xb5\x30\xca\x11\x6a\x8a\x8e\xfe\x21\x89\xa1\x2e\xdd\x32\x0d\x71\x19\xaf\x75\xb8\x33\x06\x53\x0c\x49\x6b\x1b\x8c\xc1\xf7\xa5\xc1\x00\x82\xa6\x32\x18\x01\xa2\x1b\xb7\x97\x3b\xa0\xe7\x30\x48\xeb\xff\x90\x71\x0c\x83\x35\x9b\x4d\x31\xcc\x13\x29\xe3\x1c\x06\xbb\x1d\x35\xc0\xe7\x30\xd8\x64\xc5\xcf\x61\xb0\xc9\xda\x88\xb6\x2f\xc0\x10\x96\x7c\x40\x0f\x62\x08\x26\xd9\x98\x70\xdd\x25\x18\xd7\x5d\x82\x72\xdd\x25\x38\xd7\x99\x93\xae\xb3\x67\x5d\x77\x01\xda\x75\xb6\xbc\xeb\xcc\x79\x91\x71\x44\x89\xed\x31\x89\xfb\xc8\x5f\x61\x8a\xb2\x1e\xf2\x3c\xea\xc0\x34\xdd\xf1\xaf\x54\x30\x1a\xef\xf8\xeb\x80\x24\x79\x85\xf5\x66\x15\xf0\xd9\x5a\x64\xa4\x2d\xcf\x21\xe7\xec\xe1\x8c\xc4\xde\xa9\x3b\x79\x22\x5e\xb7\x1a\x28\x6f\x41\x7d\x6e\x40\x7c\x6e\x41\x7b\x76\xda\x66\xa3\x08\xa4\x4a\x46\x5e\xb5\x3e\xa2\xa7\x0f\x67\x65\xcb\xd5\x2b\xb8\xbe\x4f\xda\x44\xc2\xf5\x7d\xd2\x26\x1a\x9e\xb1\x7f\x3e\x67\x5a\x5a\xdb\xb9\x35\x14\x52\xdb\xce\x6d\x22\xe3\xea\x76\x6e\x13\x1d\x07\xf7\xce\x67\x13\x72\x6b\xbb\xf9\xd7\x10\xd7\xae\xc4\x42\x21\xc6\xc6\x41\x28\xa3\x68\x90\x0b\x74\x8f\x24\x12\x86\x46\x30\xef\x1e\xc9\xe4\x03\x8d\x61\xda\x3d\xb2\xe7\xae\x80\xba\x48\x80\x17\x8f\x73\x22\xe5\xdc\x01\x63\xa0\x13\xcd\x9e\x0d\x7c\x41\x4d\xd8\x09\xe7\x30\xf4\xfc\x0b\x9c\x6f\x7c\x91\xd8\x9f\xc1\x00\xd6\xa7\x1b\x5f\xaa\x9c\x45\x20\x68\x05\xd3\x5f\x52\x07\x73\xa7\xb9\xd8\x20\x14\xd4\x9d\xe6\x09\xc7\x83\x02\x48\xeb\x4b\x26\x54\x40\x1a\x3b\xcd\xc5\xd6\x91\x60\x6e\xe3\x16\xdb\x6f\x42\x86\x6d\x82\x55\xc0\x00\xdb\x26\x48\x05\x0c\xb8\x6d\x82\x3d\x42\x1e\xce\x5e\x92\xa9\x26\xb2\x01\xb4\x66\xa4\x13\x1a\x8c\x60\x7c\x46\x3d\x64\x18\x34\xd8\xc5\x53\xc8\x30\x68\xa4\x8e\x70\x80\x31\x44\xaf\x3b\x34\x06\xed\xf7\x07\x03\xe0\xb4\xa0\xff\x06\x98\x16\x64\xe9\x15\x40\x87\x06\xb9\x52\x0e\xa8\x45\x43\x30\xcd\xb4\x39\x1d\x7b\x7e\x86\x45\x83\xe7\x5c\x86\x45\x83\x27\x5d\x86\x45\x83\x9f\x0e\xd8\xa2\x41\xd3\x0e\xb7\x68\xf0\xbc\xc3\x3d\x1a\x3c\xf1\x40\x8f\x06\xcd\x3c\xd4\xa4\xc1\x33\x23\x63\x2f\x17\x6c\x5d\x1b\x54\x2d\x59\x26\x0d\xb0\xb8\xd2\xef\xb0\x87\x0c\x93\x06\x79\x17\x89\xb8\x79\x1d\x72\x4c\x1a\x6c\xf3\x5a\x07\xa5\xe5\xc1\x2f\x69\xf7\x3a\xe0\x36\x0d\x72\x2f\x45\xdc\x5a\x0e\x39\x36\x8d\x19\xa9\x9d\x61\xd3\x00\x8f\x1b\xeb\x6f\xf1\x85\x1c\x9b\xc6\x8c\xfa\x73\x03\xf2\x73\x13\xea\x83\xfb\x34\xc0\x5d\x67\xfd\xfd\xbd\x80\xfa\x34\x66\x53\x48\xd4\xa8\x31\x2b\x5f\xae\x5e\xc3\xf5\xaf\x10\x30\x11\xf1\x8c\x1d\xc6\x39\x55\x5c\xbf\x47\x6f\x92\x96\xca\xf7\x1c\x98\xe8\x38\xbe\x4f\x3a\xa7\x90\xe3\x5b\xad\x73\x2a\xb9\xed\x2d\x07\x0a\x52\x2e\xb9\xe3\x00\x2b\x44\x61\xab\xc6\x7c\x5a\x2c\x94\x62\x6c\x1c\x84\x42\x8a\x06\xb9\x40\x17\x49\x22\x62\x68\x04\xfb\x2e\x92\x4c\x40\xd0\x18\xb6\x5d\x24\x7b\xf6\x0a\xc8\x8b\x04\x38\xba\x72\xd8\x6f\xc3\xfb\xff\x3a\x60\xbe\x2c\x5b\x57\x71\x11\xe0\x9b\x0b\xd9\x3f\xc1\x5b\x1a\x72\x8e\x1e\xfc\xac\x27\x47\xb5\xe9\xf1\xc8\xf8\x73\x9b\x93\x47\x5f\x8e\xdd\x08\x4c\x2e\xb7\xe3\x76\xf4\xd8\x9d\x28\xf4\xbc\x9a\xfa\x94\x8e\xf8\xfd\x14\xe4\x1f\x00\xba\x04\xc8\xc4\x3c\x73\x37\x84\x56\x62\x56\xc9\xc4\x8c\xa5\x93\x7d\x7a\x22\x31\xa3\x87\xd3\x89\x59\x25\x13\x33\x7e\xb1\xb0\x4f\x37\x4e\x4c\xeb\x93\xbc\x53\x04\xd3\xd4\xec\x8c\x73\xb3\xb3\x4d\xce\xce\x38\x3b\x3b\xdb\xf4\x34\x3e\x80\x7c\xba\x77\xfe\xf8\x67\xfa\x6b\xdd\x75\xc2\x5c\xed\x3d\x69\xde\x39\xdd\xbb\x75\x4e\xa0\x75\x4d\xf2\xe1\x74\xef\xeb\x8c\x40\xbe\x6e\x12\x9f\x68\xc1\x02\xb5\x19\x71\x5a\xf6\x5b\xab\xa7\xfb\x4d\x46\x98\x8d\x27\x13\xe1\xa3\xfe\x47\x6d\x12\x17\xec\x8a\xdd\x7a\x1f\x5d\x59\xa5\xf5\xf4\x57\xf1\xf2\x8f\xa3\x00\x0d\x7b\xc9\xae\x02\xd0\x1e\x1f\x50\x14\xa8\xcd\x88\xf6\xf0\x07\xf0\xc8\xaf\xf0\x78\xf1\xcd\x4f\x13\x48\x7c\xde\xab\xcd\x92\xfc\x64\x99\xce\x70\xc2\x5f\xfb\xc3\xee\xd2\x8e\x2f\xfa\x12\xdb\x35\x27\x94\x68\xc5\xce\xb2\x7d\x23\x36\x39\x4f\x28\xc1\xb7\x1f\xe9\x71\x96\x7f\xda\xe8\xb3\xbb\x85\x0d\xe4\x09\xe5\x95\x37\xcb\x27\x88\xc6\x57\x02\xd7\xd2\xee\xe6\x84\x51\xf9\x42\x60\xfd\x4f\xd4\x4c\x20\xaf\xb9\x51\x3e\xe1\x4b\xae\x66\xae\x8b\x2e\xf3\xf7\xd9\xef\xfe\xb8\xfb\x3b\x00\x00\xff\xff\x48\x2a\x81\xab\xe4\x88\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 35044, mode: os.FileMode(420), modTime: time.Unix(1578573081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
