// Code generated by go-bindata.
// sources:
// awsdata/instances.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instancesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x9b\xcd\x6e\xeb\x36\x10\x85\xf7\x79\x0a\xc1\xeb\x7b\x09\x93\xfa\xb1\x9d\x6d\x5f\xa0\x9b\xae\x8a\xa2\x50\x2d\xc5\x16\x10\xea\x1a\x8a\x53\xe4\xb6\xe8\xbb\x17\xf2\xed\xca\xa4\x3b\x1f\x83\xb3\x0c\x10\x1c\x48\x73\x3e\xce\x70\x66\xac\x5f\x9f\xaa\xea\xef\xa7\xaa\xaa\xaa\xcd\x34\xbf\x5d\xfb\xf9\x38\xfe\x7e\xfd\x7e\x19\x37\xcf\xd5\xa6\xf7\x2e\x7c\xbc\xf6\xcb\x69\xdc\x7c\xf9\xf1\x2f\x7f\xfe\xf4\xf3\x2f\x9b\xe7\x6a\xff\xdf\x9f\x71\x8c\xdf\x96\xef\x9b\xe7\xca\x77\x4f\x55\xf5\xcf\x97\xff\xd7\x6a\xb2\x5a\xbe\xbb\x17\xab\x03\x10\xcb\x49\x85\x7b\xa5\x06\x08\xc5\x71\x98\xde\xe3\xfd\x43\xdd\x2b\x91\x47\xca\xbe\x5e\x73\xaf\xb4\xb7\x94\x8e\x0f\x9e\x29\x79\x3b\xef\x76\x40\x8b\x19\x68\x2b\xd5\x98\x85\x16\x68\x61\x16\xb6\x40\x6c\x9f\x15\xab\x93\x80\x75\x44\x0c\x81\x55\xbb\x1d\x79\x4b\x46\xc4\xce\xd9\x5a\x8d\x30\xfa\x8d\x32\xfa\xcd\xa3\xe8\x27\x62\x20\xfa\x8d\x30\xfa\x8d\x30\xfa\xad\xf3\xf9\xf0\x37\x49\xfc\x0f\x66\x26\x5c\xd5\xf2\x31\xdb\xa5\x47\xbc\x31\x53\xd8\xb1\x75\x21\xef\xe7\x21\xb1\xc0\x1f\xcc\x3c\xb6\xca\xa9\x72\xfe\xb1\x15\xe6\xfc\x63\xeb\x0e\x90\xb4\x1d\x11\xd3\x14\x90\x63\xeb\xe2\x78\xed\x5f\x45\xa1\x57\x95\x90\x76\x10\x33\x36\x28\xa9\x18\xa4\x58\x0c\x52\x2e\x06\x19\x18\x83\xce\xcd\xb9\xc0\x4d\xc2\xd9\x4c\xdd\x0c\x9e\x88\x51\x37\x1b\xf4\x68\xd4\x4d\x92\x69\x67\xe6\x66\xeb\x02\x28\x02\x73\xf6\xa8\x7f\xda\x02\x46\x87\xdf\x82\xfa\x74\x0c\x05\x77\x20\xa0\xb7\x78\xac\x17\xec\xec\x31\x04\x8a\x5b\x67\xe2\x36\x04\x4c\x9b\x0f\xa6\x0d\xc3\xc3\xb8\x25\x6a\xec\x3d\x99\xa7\x35\xf0\xe0\xc5\x3b\xdf\x65\xe5\xba\x44\xef\xb0\x33\x8f\xc2\x0b\x6f\xe5\xec\xb0\xbd\xf0\x5e\x0e\x84\xed\x84\xf1\xb0\xef\xb6\xa7\x92\x83\x60\x8a\xd5\xdc\x82\x66\x6f\xa6\xf1\x13\xef\x7a\x80\x07\x27\xde\xf6\x10\x0f\xea\x37\x21\xbb\xa7\x66\x98\xf9\x8d\x19\xa4\xcb\x1f\x82\xd4\x8b\xd0\x9a\xc7\xe1\x26\x08\xa9\xb3\xef\x20\x37\x35\xea\x6d\x67\x9b\xb1\xca\x51\x73\x7d\xb0\xc1\x5b\xf5\x60\xb5\x31\x23\x77\x2e\xc8\x4b\xc0\x88\x33\xce\x4b\xb6\x0d\x67\x9e\x96\x6c\x13\xce\xbc\x04\x02\x0b\xce\x6f\x8f\xe4\xfc\x2e\x91\xf3\xe6\x30\x66\x12\x56\xd4\x49\x5a\x51\x27\x9e\x80\x41\x5a\x9a\x94\x15\x75\xd2\xa6\xf3\x09\x0f\xc4\x80\x07\xd2\xd2\x30\x49\x4b\xc3\x04\x47\x62\x9e\x5c\xa2\xa7\x1a\xde\xa1\x5b\x4f\x5e\x53\x09\xc7\x58\x50\xb2\xea\x3d\x08\xdb\x38\xf3\xc1\xcc\xae\x03\xbc\x8d\xb8\x64\xd9\xe9\xed\xa6\x56\xe7\x99\x4b\xcc\xb0\x3b\xad\x9b\x5c\xfe\x70\x85\xb4\xc8\xd8\x05\xff\xa6\xc7\xb0\x63\xcf\xc6\x86\x34\xd4\x06\xc8\x9d\xf9\x9a\x11\xee\x31\xc0\x8c\x32\xd2\x4d\x06\x19\x9e\x46\xef\xde\x62\xff\x7a\x1f\xb0\x44\x0b\x6c\x20\x22\xdd\x8b\xd8\x97\xfb\xf8\xa8\xea\xa5\x91\x6f\x9c\x1d\xfb\x47\x75\x2f\x3d\x4d\x7b\x67\x9e\xa7\xf8\xa0\x52\xa5\xbc\xee\x9c\x59\x0e\x22\x2e\x2d\xf6\x80\x3e\xc2\xf4\x4d\x10\xab\x95\x88\xd1\xec\x0d\xb8\x68\x9c\xdf\xe6\xc5\xb6\x69\xba\xb0\x23\xd6\x48\x6f\xb8\x11\xaf\x6e\x40\xbe\xe0\xab\x1b\xbb\x04\x44\xb8\x6d\x31\x53\x62\xa4\xab\x16\x3b\x57\xc7\x82\x4d\x0b\x28\x23\xab\x9c\xd2\xca\x82\x55\x0b\xb8\x22\x44\xbc\x6a\x01\x64\xf0\x55\x0b\x20\xa3\x55\xf6\x3e\x11\xee\x5a\x88\x10\x2b\xe3\x2c\xf6\x3a\x66\x7b\x31\xb4\xbd\x98\xda\x5e\x8c\x6d\xaf\xe4\xb6\x97\x82\xdb\x6b\xc9\xed\x65\xe8\xf6\x4a\xde\x06\x35\x70\x83\x9a\x10\xbc\x2f\x44\x88\xf0\x85\x21\x62\x04\xee\xf8\x88\xab\x74\xc9\x47\x6c\x55\xbb\x3a\x88\xd3\x88\x1a\x12\x29\x23\x5a\x44\x06\x6d\x1a\xd1\x01\x37\x28\x4b\xa0\x0e\xde\x4b\xe0\xac\x81\x26\xfb\xc2\xa7\x88\x60\x52\x77\xa1\x53\x44\x7b\x50\x77\xd1\xce\x10\x2f\xc2\x19\xe2\x45\x3a\xf5\xbb\xd4\x83\x76\x7c\xb5\x08\x5f\x75\x91\x8e\x4b\x17\x69\xe0\x16\xe5\xb8\x74\x51\x8e\x38\x97\x82\xbe\x16\xb0\xbb\xe0\xbe\x16\x18\xca\xfb\x5a\x62\xe8\xc3\xdf\x24\x7e\xca\x50\xd8\x26\x33\x43\x69\xab\x8c\x0c\x2d\x68\x96\x41\x3d\x58\x0a\x9a\x65\x30\x9e\x5f\x0a\x9a\x65\x92\x3f\x70\xb3\x6c\xd7\xf7\x85\x37\xcb\xa0\xbc\x2f\xbc\x5b\x06\xd7\xac\x05\x76\xcb\x76\x4d\x5e\x68\xbb\xcc\xa2\xaf\x9a\x79\x2f\x25\xed\x32\xc2\xb6\xa0\x5d\x46\xdc\x16\xb4\xcb\x28\x74\xb8\x5d\x26\xe4\xf2\x76\x19\xa1\xcb\xfb\x65\xc4\x2e\xec\x97\x09\xbc\xb4\x61\x46\xc4\x15\xb4\x56\x0c\xb9\x82\x5e\x88\x31\x82\x9b\x21\x04\x09\xef\x86\x18\x25\xb0\x81\x41\xbe\xd2\xae\x83\x18\xab\xf6\xb5\xa0\x65\x46\xa9\x44\x8d\x89\x94\x12\x31\x24\xbc\x67\x46\xa9\x44\x88\x1c\x6d\x9a\xa1\x05\x2a\x7c\xaf\xde\xc5\xe9\xb8\x7c\xb3\xd6\x69\x5b\xd7\xf9\xda\x14\xc3\x3f\x09\x02\x0f\x16\x44\xf3\x8a\x6b\x80\x9f\xb2\x99\xb4\xae\x4a\x24\x56\x66\xab\x71\x0d\x6e\xee\x67\x10\x73\xf3\xfa\x7d\x0d\x6c\x49\x4e\xc2\xad\x9a\xc3\x5c\xf9\xe6\xd8\x7e\x2c\xd8\xc9\xda\x14\x3c\xd8\x1b\x7f\x82\x82\x3a\x4b\x41\x9a\x14\x80\x50\x86\x82\x44\x87\x50\x50\x67\x29\x48\x73\x1e\x10\xd2\x51\x20\xdc\xd0\xac\x62\x2a\x0e\x7a\x1d\x08\xbd\x8c\x84\x5e\x87\x42\x2f\x63\x41\xb7\x2e\x7a\xff\xea\xc3\xf5\x0f\x9f\x2d\x81\x4d\x66\xb3\x10\x82\x3d\xfb\x79\xff\xda\x15\x48\x76\xe0\x0b\xb3\xf7\xaf\x87\x02\xc5\x43\xb0\xdf\xfb\x43\xfb\x01\xc5\x87\x77\x75\xfe\x4c\xf9\x90\x59\xcf\xb4\xa6\xc7\x1f\x7e\xe4\x0f\x48\x05\xe9\x67\x5d\xb6\x21\xab\x1a\x7f\xe1\xfa\xb0\x45\x8a\xf8\x4b\x31\x9b\xc1\x55\x8e\x5e\x38\x91\xbf\x23\x3d\x72\xf6\x04\xf2\x2f\xaf\x6d\x4c\x56\x3d\xd9\xc5\x7f\x15\xd3\xfd\xf2\x73\x55\x13\xfe\xf0\x73\x95\x13\xdd\xfb\x57\xa9\x6c\x3e\xf9\xac\x03\x25\xf7\xfe\xa7\xdf\x9e\xfe\x0d\x00\x00\xff\xff\x05\xab\x4b\xd2\x5a\x43\x00\x00")

func instancesJsonBytes() ([]byte, error) {
	return bindataRead(
		_instancesJson,
		"instances.json",
	)
}

func instancesJson() (*asset, error) {
	bytes, err := instancesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instances.json", size: 17242, mode: os.FileMode(420), modTime: time.Unix(1571303908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instances.json": instancesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instances.json": &bintree{instancesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

//lint:file-ignore ST1005 Ignore issues with generated code
